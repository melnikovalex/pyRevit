#!/bin/bash

# Reset in case getopts has been used previously in the shell.
OPTIND=1

# save env
THISPATH=$(dirname "$0")

# initialize build options
CLEAN=false
OPENDOCS=false
BUILDDOCS=false
BUILDLABS=false
BUILDINSTALLER=false
BUILDINSTALLERCLI=false
BUILDDEBUG=false
REBUILD=false

# ==============================================================================
# Configs
# ------------------------------------------------------------------------------
DEVENV='devenv.exe'
LOGFILE="./build.log"

BINPATH=$THISPATH/../bin
UTILSPATH=$THISPATH/pyRevitUtils

DOCSPATH=$THISPATH/../docs
DOCSBUILDPATH=$THISPATH/../docs/_build
DOCSINDEXPATH=$DOCSBUILDPATH/index.html

LABS=$THISPATH/pyRevitLabs/pyRevitLabs.sln

# API file paths must be absolute otherwise advancedinstaller will mess up
# the relative source paths defined inside the api file and fails
PYREVIT_AIPFILE=$(realpath $THISPATH/../release/pyrevit.aip)
PYREVIT_CLI_AIPFILE=$(realpath $THISPATH/../release/pyrevit-cli.aip)
PYREVIT_VERSION=""
PYREVIT_VERSION_FILE=$THISPATH/../pyrevitlib/pyrevit/version
PYREVIT_CLI_VERSION=""

AUTOCOMPBUILDER=$UTILSPATH/pyrevit-generate-autocomplete.py
USAGEPATTERNS=$THISPATH/pyRevitLabs/pyRevitCLI/Resources/UsagePatterns.txt
AUTOCOMP=$UTILSPATH/pyrevit-autocomplete.go
AUTOCOMPBIN=$BINPATH/pyrevit-autocomplete.exe

TELEMETRYSERVERPATH=$THISPATH/pyRevitTelemetryServer
TELEMETRYSERVER=$TELEMETRYSERVERPATH/main.go
TELEMETRYSERVERBIN=$BINPATH/pyrevit-telemetryserver.exe
# ==============================================================================

function print_help() {
    cat << EOF
Usage: build OPTIONS

| Build Tools:                                                                 |
|                                                                              |
|     Install these tools before starting the build process                    |
|         cmder (full)              https://cmder.net/                         |
|         choco (pkg manager)       https://chocolatey.org/install             |
|         Visual Studio (C#)        https://visualstudio.microsoft.com/vs/     |
|         python 2.7 (docs)         https://www.python.org/downloads/          |
|         pipenv (venv)             https://pipenv.readthedocs.io/en/latest/   |
|         Advanced Installer v15.9 (installer builder)                         |
|                                   https://www.advancedinstaller.com          |
|                                                                              |
|     Add the "Microsoft Visual Studio\2017\Community\Common7\IDE" path        |
|     to system %PATH% env variable. Test 'devenv.exe' works from shell.       |
|                                                                              |
|     Add the "C:\Program Files (x86)\Caphyon\Advanced Installer 15.9\bin\x86" |
|     path to system %PATH% env variable. Test 'advancedinstaller.com /help'   |
|     works from shell.                                                        |
|                                                                              |
|     After successfully installing build tools, open bash and run command     |
|     below. This will install other tools (listed below) using choco,         |
|     and will prepare the python venv for building docs.                      |
|         $ build -i                                                           |
|                                                                              |
|     Build time dependencies:                                                 |
|         golang                for building helper utilities                  |
|         upx                   for compressing exe binaries                   |


OPTIONS:
    -h                  print this help
    -i                  install build-time dependencies
    ----------------------------------------------------------------------- docs
    -d                  build documentation using sphinx.
    -p                  open docs page after build
    ----------------------------------------------------------------------- labs
    -l                  build pyrevit labs modules and cli tool using
                         Visual Studio C# compiler
    -g                  build pyrevit labs module for debug
    ---------------------------------------------------------------- docs & labs
    -c                  clean build files and exit; use with -d or -l
    -r                  re-build; use with -d or -l
    ----------------------------------------------------------------- installers
    -x                  build pyrevit installer
    -x -increment       increment version and build pyrevit installer
    -x <version>        set version and build pyrevit installer
    -y                  build cli admin utility installer

Examples:
    build -dp           build and open docs
    build -rdp          re-build and open docs
    build -rl           re-build labs

Notes:
    1. bash build script is used to allow building docs and other
       non-win-dependent components on other operating systems as well.

    2. helper utilities are written in go to benefit from load time speed.
       e.g. pyrevit-autocomplete.exe is designed to be used by shell to
       provide autocomplete for pyrevit cli. it is important that it runs fast
       so autocomplete is easy to use.
    
    3. exe binaries are compressed after build to reduce the file size since
       these binaries are stored in the git repo for ease of deployment.

Report bugs to: https://github.com/eirannejad/pyRevit/issues

EOF
exit 1
}

function check_docs_buildenv() {
    echo "verifying build dependencies for docs..."
    if ! [ -x "$(command -v pipenv)" ]; then
        echo -e '\033[31mError: pipenv is not installed.\033[39m\n' >& 2
        print_help
        exit 5
    fi
}

function check_labs_buildenv() {
    echo "verifying build dependencies for labs..."
    if ! [ -x "$(command -v upx)" ]; then
        echo -e '\033[31mError: upx is not installed.\033[39m\n' >& 2
        print_help
        exit 2
    elif ! [ -x "$(command -v go)" ]; then
        echo -e '\033[31mError: go is not installed.\033[39m\n' >& 2
        print_help
        exit 3
    elif ! [ -x "$(command -v devenv)" ]; then
        echo -e '\033[31mError: Visual Studio is not installed.\033[39m\n' >& 2
        print_help
        exit 4
    fi
}

function clean_docs() {
    # function to clean all generated docs
    echo "cleaning docs..."
    rm -rf $THISPATH/../docs/_build
}

function clean_labs() {
    # function to clean labs build files
    echo "cleaning labs..."
    # rm -f ../bin/*.exe
    # rm -f ../bin/*.dll
    "$DEVENV" "$LABS" "//Clean" "Debug" "//out" $LOGFILE
}

function open_page() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac OSX
        open $1
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        # POSIX compatibility layer and Linux environment
        # emulation for Windows
        start $1
    elif [[ "$OSTYPE" == "msys" ]]; then
        # Lightweight shell and GNU utilities compiled for
        # Windows (part of MinGW)
        start $1
    elif [[ "$OSTYPE" == "win32" ]]; then
        # I'm not sure this can happen.
        start $1
    fi
}

function install_opt() {
    echo "installing build-time dependencies..."
    echo "installing upx..."
    choco install upx -y &>/dev/null
    echo "installing go..."
    choco install golang -y &>/dev/null
    echo "installing gcc..."
    choco install mingw -y &>/dev/null
    echo "prepare git for go packages..."
    git config --global http.https://pkg.re.followRedirects true
    # echo "installing python 2.7 ..."
    # choco install python2 -y &>/dev/null
    # echo "installing pipenv..."
    # pip2 install pipenv
    echo "setting up pipenv venv..."
    pipenv install
}

function process_args() {
    while getopts ":hidplgcrx:y" opt; do
        case "$opt" in
        h|\?) print_help
            ;;
        i)  install_opt
            ;;
        d)  BUILDDOCS=true
            ;;
        p)  OPENDOCS=true
            ;;
        l)  BUILDLABS=true
            ;;
        g)  BUILDDEBUG=true
            ;;
        c)  CLEAN=true
            ;;
        r)  REBUILD=true
            ;;
        x)  BUILDINSTALLER=true;PYREVIT_VERSION=$OPTARG
            ;;
        y)  BUILDINSTALLERCLI=true;PYREVIT_CLI_VERSION=$OPTARG
            ;;
        # handle missing arguments
        :)  if [[ $OPTARG == "x" ]]; then
                BUILDINSTALLER=true;
            fi
            ;;
        esac
    done
    if [ $OPTIND -eq 1 ]; then print_help; fi
    shift $((OPTIND-1))
}

function cleanup_and_exit() {
    # cleanups
    rm -f $LOGFILE
    exit
}

# ==============================================================================
# main()
# ==============================================================================

# process command line arguments and set global vars
# ------------------------------------------------------------------------------
process_args $*

# build docs?
# ------------------------------------------------------------------------------
if $BUILDDOCS; then
    # verify env
    check_docs_buildenv

    # re-build?
    if $REBUILD; then
        clean_docs
    # just clean?
    elif $CLEAN; then
        clean_docs
        cleanup_and_exit
    fi

    # build docs
    echo "building docs..."
    echo "build path: "$DOCSPATH
    pipenv run sphinx-build -b html $DOCSPATH $DOCSBUILDPATH

    # open docs after build?
    if $OPENDOCS; then
        echo "opening docs..."
        open_page $DOCSINDEXPATH
    fi

# build labs?
# ------------------------------------------------------------------------------
elif $BUILDLABS; then
    # verify env
    check_labs_buildenv

    # re-build?
    BUILDTYPE="//Build"
    if $REBUILD; then
        clean_labs
        BUILDTYPE="//Rebuild"
    # just clean?
    elif $CLEAN; then
        clean_labs
        cleanup_and_exit
    fi

    # build for debug or release?
    BUILDCONFIG="Release"
    if $BUILDDEBUG; then
        BUILDCONFIG="Debug"
    fi

    # start a log file and listen
    cat /dev/null > $LOGFILE
    tail -f $LOGFILE &
        
    # build labs
    echo "building labs for "$BUILDCONFIG
    "$DEVENV" "$LABS" "$BUILDTYPE" "$BUILDCONFIG" "//out" $LOGFILE

    # clean log file
    kill $!

    # build and pack utilities
    # build pyrevit cli auto complete helper
    echo "building autocomplete helper binary"
    rm -f $AUTOCOMPBIN
    echo "auto-generating autocomplete helper code"
    pipenv run python $AUTOCOMPBUILDER $USAGEPATTERNS $AUTOCOMP
    echo "formatting autocomplete helper code"
    go fmt $AUTOCOMP
    go get "github.com/posener/complete"
    echo "compiling autocomplete helper code"
    go build -o=$AUTOCOMPBIN $AUTOCOMP
    upx --mono $AUTOCOMPBIN
    rm -f $AUTOCOMP

    # build pyrevit log server
    rm -f $TELEMETRYSERVERBIN
    go get "github.com/lib/pq"
    go get "gopkg.in/mgo.v2"
    go get "github.com/denisenkom/go-mssqldb"
    go get "github.com/go-sql-driver/mysql"
    go get "github.com/mattn/go-sqlite3"
    go get "github.com/gorilla/mux"
    go get "github.com/satori/go.uuid"
    go get "github.com/gofrs/uuid"
    go get "pkg.re/essentialkaos/ek.v10/fmtc"
    go get "github.com/asaskevich/govalidator"
    go build -o=$TELEMETRYSERVERBIN -ldflags "-w" $TELEMETRYSERVER
    upx --mono $TELEMETRYSERVERBIN

# build installers?
# ------------------------------------------------------------------------------
elif $BUILDINSTALLER || $BUILDINSTALLERCLI; then
    # build installer for public pyrevit?
    if $BUILDINSTALLER; then
        echo "version: "$PYREVIT_VERSION
        if [[ $PYREVIT_VERSION != "" ]]; then
            echo "setting version "$PYREVIT_VERSION" on "$PYREVIT_AIPFILE
            advancedinstaller.com "//edit" $PYREVIT_AIPFILE "//SetVersion" $PYREVIT_VERSION
            AIPVersion=$(advancedinstaller.com "//edit" $PYREVIT_AIPFILE "//GetProperty" "ProductVersion")
            echo $AIPVersion > $PYREVIT_VERSION_FILE
        fi
        echo "building: "$PYREVIT_AIPFILE
        advancedinstaller.com "//build" $PYREVIT_AIPFILE
    fi

    # build installer for cli admin utility?
    if $BUILDINSTALLERCLI; then
        echo "building: "$PYREVIT_CLI_AIPFILE
        advancedinstaller.com "//build" $PYREVIT_CLI_AIPFILE
    fi
fi

# done
echo "build completed..."
cleanup_and_exit